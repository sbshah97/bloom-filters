// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sbshah97/bloom-filters/bloom (interfaces: FileOperations)

// Package bloom is a generated GoMock package.
package bloom

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileOperations is a mock of FileOperations interface.
type MockFileOperations struct {
	ctrl     *gomock.Controller
	recorder *MockFileOperationsMockRecorder
}

// MockFileOperationsMockRecorder is the mock recorder for MockFileOperations.
type MockFileOperationsMockRecorder struct {
	mock *MockFileOperations
}

// NewMockFileOperations creates a new mock instance.
func NewMockFileOperations(ctrl *gomock.Controller) *MockFileOperations {
	mock := &MockFileOperations{ctrl: ctrl}
	mock.recorder = &MockFileOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileOperations) EXPECT() *MockFileOperationsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFileOperations) Create(arg0 string) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileOperationsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileOperations)(nil).Create), arg0)
}

// Open mocks base method.
func (m *MockFileOperations) Open(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFileOperationsMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFileOperations)(nil).Open), arg0)
}
